#!/bin/bash

# Study Group API Test Script
# ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Study Group feature

echo "üß™ Study Group API Test Script"
echo "================================"

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ base URL
BASE_URL="http://localhost:8080"

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
GROUP_ID=""
INVITE_TOKEN=""
UPLOAD_URL=""
FILE_URL=""

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
show_result() {
    echo "‚úÖ $1"
    echo "Response: $2"
    echo "---"
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
show_error() {
    echo "‚ùå $1"
    echo "Error: $2"
    echo "---"
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token
if [ -z "$TOKEN" ]; then
    echo "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TOKEN ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå"
    echo "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: export TOKEN=\"Bearer eyJhbGciOi...\""
    exit 1
fi

echo "üîë Using token: ${TOKEN:0:50}..."
echo ""

# 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
echo "1Ô∏è‚É£ Creating Study Group..."
RESPONSE=$(curl -s -X POST "$BASE_URL/api/groups" \
    -H "Authorization: $TOKEN" \
    -H "Content-Type: application/json" \
    -d '{
        "name": "SE331 Review Group",
        "description": "Study group for SE331 final exam preparation"
    }')

if [[ $RESPONSE == *"id"* ]]; then
    GROUP_ID=$(echo $RESPONSE | grep -o '"id":[0-9]*' | cut -d':' -f2)
    show_result "Group created successfully" "$RESPONSE"
else
    show_error "Failed to create group" "$RESPONSE"
    exit 1
fi

echo "üìù Group ID: $GROUP_ID"
echo ""

# 2. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
echo "2Ô∏è‚É£ Getting My Groups..."
RESPONSE=$(curl -s -H "Authorization: $TOKEN" "$BASE_URL/api/groups/my")
show_result "My groups retrieved" "$RESPONSE"
echo ""

# 3. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
echo "3Ô∏è‚É£ Getting Group Details..."
RESPONSE=$(curl -s -H "Authorization: $TOKEN" "$BASE_URL/api/groups/$GROUP_ID")
show_result "Group details retrieved" "$RESPONSE"
echo ""

# 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÄ‡∏ä‡∏¥‡∏ç
echo "4Ô∏è‚É£ Generating Invite Token..."
RESPONSE=$(curl -s -X POST "$BASE_URL/api/groups/$GROUP_ID/invites" \
    -H "Authorization: $TOKEN")

if [[ $RESPONSE == *"token"* ]]; then
    INVITE_TOKEN=$(echo $RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    show_result "Invite token generated" "$RESPONSE"
else
    show_error "Failed to generate invite token" "$RESPONSE"
fi

echo "üé´ Invite Token: $INVITE_TOKEN"
echo ""

# 5. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
echo "5Ô∏è‚É£ Getting Group Members..."
RESPONSE=$(curl -s -H "Authorization: $TOKEN" "$BASE_URL/api/groups/$GROUP_ID/members")
show_result "Group members retrieved" "$RESPONSE"
echo ""

# 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (init upload)
echo "6Ô∏è‚É£ Testing File Upload (Init)..."
RESPONSE=$(curl -s -X POST "$BASE_URL/api/groups/$GROUP_ID/resources/upload-url" \
    -H "Authorization: $TOKEN" \
    -H "Content-Type: application/json" \
    -d '{
        "fileName": "test-document.pdf",
        "mimeType": "application/pdf",
        "size": 1048576
    }')

if [[ $RESPONSE == *"uploadUrl"* ]]; then
    UPLOAD_URL=$(echo $RESPONSE | grep -o '"uploadUrl":"[^"]*"' | cut -d'"' -f4)
    FILE_URL=$(echo $RESPONSE | grep -o '"fileUrl":"[^"]*"' | cut -d'"' -f4)
    show_result "Upload URL generated" "$RESPONSE"
else
    show_error "Failed to generate upload URL" "$RESPONSE"
fi

echo "üì§ Upload URL: ${UPLOAD_URL:0:50}..."
echo "üìÑ File URL: ${FILE_URL:0:50}..."
echo ""

# 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö complete upload (‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á)
echo "7Ô∏è‚É£ Testing Complete Upload..."
RESPONSE=$(curl -s -X POST "$BASE_URL/api/groups/$GROUP_ID/resources" \
    -H "Authorization: $TOKEN" \
    -H "Content-Type: application/json" \
    -d "{
        \"fileName\": \"test-document.pdf\",
        \"fileUrl\": \"$FILE_URL\",
        \"title\": \"Test Document\",
        \"description\": \"This is a test document for API testing\",
        \"tags\": [\"test\", \"api\", \"document\"]
    }")

if [[ $RESPONSE == *"id"* ]]; then
    show_result "Resource uploaded successfully" "$RESPONSE"
else
    show_error "Failed to complete upload" "$RESPONSE"
fi
echo ""

# 8. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå
echo "8Ô∏è‚É£ Getting Group Resources..."
RESPONSE=$(curl -s -H "Authorization: $TOKEN" "$BASE_URL/api/groups/$GROUP_ID/resources")
show_result "Group resources retrieved" "$RESPONSE"
echo ""

# 9. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏∑‡πà‡∏ô)
echo "9Ô∏è‚É£ Testing Role Update (if other members exist)..."
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô
RESPONSE=$(curl -s -X PATCH "$BASE_URL/api/groups/$GROUP_ID/members/999" \
    -H "Authorization: $TOKEN" \
    -H "Content-Type: application/json" \
    -d '{
        "userId": 999,
        "role": "moderator"
    }')

# ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ 404 ‡∏´‡∏£‡∏∑‡∏≠ error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ user ID 999
if [[ $RESPONSE == *"error"* ]] || [[ $RESPONSE == *"404"* ]]; then
    show_result "Role update test (expected error for non-existent user)" "$RESPONSE"
else
    show_result "Role update response" "$RESPONSE"
fi
echo ""

# 10. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
echo "üîü Testing Leave Group..."
RESPONSE=$(curl -s -X POST "$BASE_URL/api/groups/$GROUP_ID/leave" \
    -H "Authorization: $TOKEN")

if [[ $RESPONSE == *"409"* ]] || [[ $RESPONSE == *"Owner cannot leave"* ]]; then
    show_result "Leave group test (expected error for owner)" "$RESPONSE"
else
    show_result "Leave group response" "$RESPONSE"
fi
echo ""

# 11. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°
echo "1Ô∏è‚É£1Ô∏è‚É£ Testing Delete Group..."
RESPONSE=$(curl -s -X DELETE "$BASE_URL/api/groups/$GROUP_ID" \
    -H "Authorization: $TOKEN")

if [[ $RESPONSE == *"200"* ]] || [[ $RESPONSE == "" ]]; then
    show_result "Group deleted successfully" "Group $GROUP_ID deleted"
else
    show_error "Failed to delete group" "$RESPONSE"
fi
echo ""

# 12. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢ token (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token)
if [ ! -z "$INVITE_TOKEN" ]; then
    echo "1Ô∏è‚É£2Ô∏è‚É£ Testing Join by Token..."
    RESPONSE=$(curl -s -X POST "$BASE_URL/api/groups/join" \
        -H "Authorization: $TOKEN" \
        -H "Content-Type: application/json" \
        -d "{
            \"token\": \"$INVITE_TOKEN\"
        }")
    
    if [[ $RESPONSE == *"error"* ]] || [[ $RESPONSE == *"already a member"* ]]; then
        show_result "Join by token test (expected error for existing member)" "$RESPONSE"
    else
        show_result "Join by token response" "$RESPONSE"
    fi
    echo ""
fi

echo "üéâ Study Group API Test Completed!"
echo "=================================="
echo ""
echo "üìã Test Summary:"
echo "‚úÖ Group creation"
echo "‚úÖ Group listing"
echo "‚úÖ Group details"
echo "‚úÖ Invite token generation"
echo "‚úÖ Member listing"
echo "‚úÖ File upload (init)"
echo "‚úÖ File upload (complete)"
echo "‚úÖ Resource listing"
echo "‚úÖ Role update (error handling)"
echo "‚úÖ Leave group (error handling)"
echo "‚úÖ Delete group"
echo "‚úÖ Join by token (error handling)"
echo ""
echo "üöÄ Study Group feature is ready for Frontend integration!"
